{% block _campaignevent_properties_row %}
<div class="row condition-row">
    <div class="col-xs-4">
        {{ form_row(form.field) }}
    </div>
    <div class="col-xs-4">
        {{ form_row(form.operator) }}
    </div>
    <div class="col-xs-4">
        {{ form_row(form.value) }}
    </div>
</div>

<style>
    .eventdatepicker {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23999" width="16" height="16"><path d="M7 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-8H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3V2h-2v4h-6V2h-2v4zm9 18H4V8h16v16zm-5-5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm5 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-10 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/></svg>') !important;
        background-repeat: no-repeat !important;
        background-position: right 10px center !important;
        background-size: 16px !important;
        padding-right: 35px !important;
    }

    /* Style HTML5 date input */
    input[type="date"].eventdatepicker {
        position: relative;
    }

    /* Chrome, Safari, Edge, Opera */
    input[type="date"].eventdatepicker::-webkit-calendar-picker-indicator {
        cursor: pointer;
        border-radius: 4px;
        margin-right: 2px;
        opacity: 0.6;
        filter: invert(0.6);
    }

    input[type="date"].eventdatepicker::-webkit-calendar-picker-indicator:hover {
        opacity: 1;
        filter: invert(0.8);
    }

    /* Firefox */
    input[type="date"].eventdatepicker::-moz-calendar-picker-indicator {
        cursor: pointer;
    }
</style>

<div class="row condition-custom-date-row" style="display: none;">
    <div class="col-sm-offset-4 col-sm-4">
        <div class="row">
            <div class="form-group col-xs-12">
                <div class="input-group">
                    <span class="input-group-addon preaddon">
                        <i class="symbol-hashtag"></i>
                    </span>
                    <input autocomplete="false" type="number" id="event-field-custom-date-interval" class="form-control" value="1" onchange="Mautic.updateEventFieldValueOptions(mQuery('#campaignevent_properties_value'), true)">
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-4">
        <div class="row">
            <div class="form-group col-xs-12">
                <select id="event-field-custom-date-unit" class="form-control chosen" autocomplete="false" onchange="Mautic.updateEventFieldValueOptions(mQuery('#campaignevent_properties_value'), true)">
                    {% for interval in ['i', 'h', 'd', 'm', 'y'] %}
                        <option {% if 'd' == interval %}selected{% endif %} value="{{ interval }}">
                            {{ ('mautic.campaign.event.intervalunit.choice.' ~ interval)|trans }}
                        </option>
                    {% endfor %}
                </select>
            </div>
        </div>
    </div>
</div>

<script>
    if (typeof Mautic.updateEventFieldValues === 'undefined') {
        // Store original updateFieldOperatorValue function
        var originalUpdateFieldOperatorValue = Mautic.updateFieldOperatorValue;

        // Override Mautic.updateFieldOperatorValue to handle event fields with proper action
        Mautic.updateFieldOperatorValue = function(field, action, valueOnChange, valueOnChangeArguments) {
            var fieldId = mQuery(field).attr('id');
            var isOperatorField = fieldId.indexOf('_operator') !== -1;
            var fieldType = isOperatorField ? 'operator' : 'field';
            var fieldPrefix = fieldId.slice(0, -1 * fieldType.length);
            var currentFieldType = mQuery('#' + fieldPrefix + 'value').attr('data-toggle');

            // Check if this is an event field (action contains 'plugin:events')
            var isEventField = action && action.indexOf('plugin:events') !== -1;

            // For event fields, use custom handling to preserve the Events bundle action
            if (isEventField) {
                Mautic.activateLabelLoadingIndicator(fieldId);
                var fieldAlias = mQuery('#'+fieldPrefix+'field').val();
                var fieldOperator = mQuery('#'+fieldPrefix+'operator').val();

                Mautic.ajaxActionRequest(action, {'alias': fieldAlias, 'operator': fieldOperator, 'changed': fieldType}, function(response) {
                    if (typeof response.options != 'undefined') {
                        var valueField = mQuery('#'+fieldPrefix+'value');
                        var valueFieldAttrs = {
                            'class': valueField.attr('class'),
                            'id': valueField.attr('id'),
                            'name': valueField.attr('name'),
                            'autocomplete': valueField.attr('autocomplete'),
                            'value': valueField.val(),
                            'data-toggle': currentFieldType,
                            'data-onload-callback': valueField.attr('data-onload-callback')
                        };

                        if (mQuery('#'+fieldPrefix+'value_chosen').length) {
                            valueFieldAttrs['value'] = '';
                            Mautic.destroyChosen(valueField);
                        }

                        if (!mQuery.isEmptyObject(response.options) && response.fieldType !== 'number') {
                            var newValueField = mQuery('<select/>')
                                .attr('class', valueFieldAttrs['class'])
                                .attr('id', valueFieldAttrs['id'])
                                .attr('name', valueFieldAttrs['name'])
                                .attr('autocomplete', valueFieldAttrs['autocomplete'])
                                .attr('data-toggle', valueFieldAttrs['data-toggle'])
                                .attr('data-onload-callback', valueFieldAttrs['data-onload-callback']);

                            var multiple = (fieldOperator === 'in' || fieldOperator === '!in');
                            if (multiple) {
                                newValueField.attr('multiple', 'multiple');
                                var newName = newValueField.attr('name') + '[]';
                                newValueField.attr('name', newName);
                                newValueField.attr('data-placeholder', mauticLang['chosenChooseMore']);
                            }

                            mQuery.each(response.options, function(value, optgroup) {
                                if (typeof optgroup === 'object') {
                                    var optgroupEl = mQuery('<optgroup/>').attr('label', value);
                                    mQuery.each(optgroup, function(optVal, label) {
                                        var option = Mautic.createOption(optVal, label);
                                        if (response.optionsAttr && response.optionsAttr[optVal]) {
                                            mQuery.each(response.optionsAttr[optVal], function(optAttr, optVal) {
                                                option.attr(optAttr, optVal);
                                            });
                                        }
                                        optgroupEl.append(option)
                                    });
                                    newValueField.append(optgroupEl);
                                } else {
                                    var option = Mautic.createOption(value, optgroup);
                                    if (response.optionsAttr && response.optionsAttr[value]) {
                                        mQuery.each(response.optionsAttr[value], function(optAttr, optVal) {
                                            option.attr(optAttr, optVal);
                                        });
                                    }
                                    newValueField.append(option);
                                }
                            });
                            newValueField.val(valueFieldAttrs['value']);
                            valueField.replaceWith(newValueField);
                            Mautic.activateChosenSelect(newValueField);

                            // Add change event handler to show datepicker for "custom" option
                            mQuery('#' + valueFieldAttrs['id']).off('change').on('change', function() {
                                var selectedValue = mQuery(this).val();
                                var hasDatepickerOption = mQuery(this).find('option[data-datepicker=1]').length > 0;
                                if (hasDatepickerOption && mQuery(this).find('[value="' + selectedValue + '"][data-datepicker=1]').length > 0) {
                                    // Show a temporary date input for custom date selection
                                    var tempDatePickerId = valueFieldAttrs['id'] + '_datepicker';
                                    var existingDatePicker = mQuery('#' + tempDatePickerId);

                                    if (existingDatePicker.length === 0) {
                                        var tempDatePicker = mQuery('<input type="text" />')
                                            .attr('id', tempDatePickerId)
                                            .attr('placeholder', 'yyyy-mm-dd')
                                            .addClass('form-control eventdatepicker')
                                            .css({'margin-top': '10px'})
                                            .on('change', function() {
                                                mQuery('#' + valueFieldAttrs['id']).val(mQuery(this).val()).trigger('change');
                                                mQuery(this).remove();
                                            });
                                        mQuery(this).closest('.form-group').append(tempDatePicker);
                                        setTimeout(function() {
                                            Mautic.initEventDatePicker(mQuery('#' + tempDatePickerId));
                                            mQuery('#' + tempDatePickerId).focus();
                                        }, 50);
                                    }
                                }
                            });
                        } else if (mQuery.isEmptyObject(response.options) || response.fieldType === 'number') {
                            // For date fields or number fields with no options, create a text/number input
                            var inputType = response.fieldType === 'number' ? 'number' : 'text';
                            var newValueField = mQuery('<input/>')
                                .attr('class', valueFieldAttrs['class'])
                                .attr('id', valueFieldAttrs['id'])
                                .attr('name', valueFieldAttrs['name'])
                                .attr('autocomplete', valueFieldAttrs['autocomplete'])
                                .attr('type', inputType)
                                .attr('data-toggle', valueFieldAttrs['data-toggle'])
                                .attr('data-onload-callback', valueFieldAttrs['data-onload-callback'])
                                .val(valueFieldAttrs['value']);

                            // Add datepicker class for date fields
                            if ('date' === response.fieldType) {
                                newValueField.addClass('eventdatepicker');
                                newValueField.attr('placeholder', 'yyyy-mm-dd');
                            }

                            valueField.replaceWith(newValueField);

                            // Initialize datepicker if it's a date field
                            if ('date' === response.fieldType) {
                                setTimeout(function() {
                                    Mautic.initEventDatePicker(mQuery('#' + valueFieldAttrs['id']));
                                }, 100);
                            }
                        }

                        if (response.operators) {
                            var operatorField = mQuery('#'+fieldPrefix+'operator');
                            var currentOperator = operatorField.val();
                            operatorField.html('');
                            mQuery.each(response.operators, function(value, label) {
                                operatorField.append(mQuery('<option/>').attr('value', value).text(label));
                            });
                            operatorField.val(currentOperator);
                        }

                        if (response.disabled) {
                            mQuery('#'+fieldPrefix+'value').attr('disabled', 'disabled');
                        } else {
                            mQuery('#'+fieldPrefix+'value').removeAttr('disabled');
                        }
                    }

                    if (valueOnChange && typeof valueOnChange == 'function') {
                        mQuery('#'+fieldPrefix+'value').off('change').on('change', function () {
                            if (typeof valueOnChangeArguments != 'object') {
                                valueOnChangeArguments = [];
                            }
                            valueOnChangeArguments.unshift(mQuery('#'+fieldPrefix+'value'));
                            valueOnChange.apply(null, valueOnChangeArguments);
                        });
                    }
                    Mautic.removeLabelLoadingIndicator();
                }, false, false, "POST");
            } else {
                // Use original function for non-event fields
                originalUpdateFieldOperatorValue.apply(this, arguments);
            }
        };

        Mautic.updateEventFieldValues = function (field) {
            mQuery('.condition-custom-date-row').hide();
            Mautic.updateFieldOperatorValue(field, 'plugin:events:updateEventFieldValues', Mautic.updateEventFieldValueOptions, [true]);

            var fieldId = mQuery(field).attr('id');
            var fieldPrefix = fieldId.slice(0, -5);
            setTimeout(function () {
                mQuery('#' + fieldPrefix + 'operator').attr('onchange', 'Mautic.updateEventFieldValues(this)');
            }, 0);
        };

        Mautic.updateEventFieldValueOptions = function (field, updating) {
            var fieldId = mQuery(field).attr('id');
            var fieldPrefix = fieldId.slice(0, -5);
            var operator = mQuery('#' + fieldPrefix + 'operator').val();
            var fieldType = mQuery('#' + fieldPrefix + 'value').attr('data-toggle');

            // Check if operator is a date comparison operator
            var dateOperators = ['date', '=', '!=', '>', '<', '>=', '<='];
            var isDateOperator = dateOperators.indexOf(operator) !== -1;

            // For date fields with date operators, handle custom date option
            if (isDateOperator && 'date' === fieldType) {
                var valueField = mQuery(field);
                var isSelectField = valueField.prop('tagName') === 'SELECT';

                if (isSelectField) {
                    var customOption = valueField.find('option[data-custom=1]');

                    // Only process if this is actually a select element with custom option
                    if (customOption.length > 0) {
                        var value = valueField.val();
                        var customSelected = mQuery(customOption).prop('selected');

                        if (customSelected) {
                            if (!updating) {
                                var regex = /(\+|-)(PT?)([0-9]*)([DMHY])$/g;
                                var match = regex.exec(value);
                                if (match) {
                                    var interval = ('-' === match[1]) ? match[1] + match[3] : match[3];
                                    var unit = ('PT' === match[2] && 'M' === match[4]) ? 'i' : match[4];

                                    mQuery('#event-field-custom-date-interval').val(interval);
                                    mQuery('#event-field-custom-date-unit').val(unit.toLowerCase());
                                }
                            } else {
                                var interval = mQuery('#event-field-custom-date-interval').val();
                                var unit = mQuery('#event-field-custom-date-unit').val();

                                var prefix = ('i' === unit || 'h' === unit) ? 'PT' : 'P';
                                if ('i' === unit) {
                                    unit = 'm';
                                }

                                unit = unit.toUpperCase();

                                var operatorChar = parseInt(interval, 10) < 0 ? '-' : '+';
                                interval = Math.abs(parseInt(interval, 10));
                                var newValue = operatorChar + prefix + interval + unit;
                                customOption.attr('value', newValue);
                            }
                            mQuery('.condition-custom-date-row').show();
                        } else {
                            mQuery('.condition-custom-date-row').hide();
                        }
                    } else {
                        // If no custom option found, just show the custom date row
                        // (it will be populated when AJAX completes)
                        mQuery('.condition-custom-date-row').show();
                    }
                } else {
                    // For text input fields with date type, initialize datepicker
                    Mautic.initEventDatePicker(valueField);
                }
            } else {
                mQuery('.condition-custom-date-row').hide();
            }
        };

        // Initialize date picker for date fields
        // Tries datetimepicker first (if available), then HTML5 type="date"
        Mautic.initEventDatePicker = function(field) {
            var $field = mQuery(field);

            if (!$field.length) {
                return;
            }

            // Try using datetimepicker if available (Mautic standard)
            if (typeof $field.datetimepicker === 'function') {
                try {
                    $field.datetimepicker({
                        format: 'Y-m-d',
                        closeOnDateSelect: true,
                        validateOnBlur: false,
                        scrollMonth: false,
                        scrollInput: false,
                        timepicker: false
                    });
                    return;
                } catch(e) {
                    // If datetimepicker fails, continue to HTML5
                }
            }

            // Fallback: Convert to HTML5 date input type
            if ($field.attr('type') === 'text') {
                $field.attr('type', 'date');
                // Set value in correct format if it exists
                var currentVal = $field.val();
                if (currentVal && !currentVal.match(/^\d{4}-\d{2}-\d{2}$/)) {
                    // Try to parse and reformat the value
                    try {
                        var date = new Date(currentVal);
                        if (!isNaN(date.getTime())) {
                            var year = date.getFullYear();
                            var month = String(date.getMonth() + 1).padStart(2, '0');
                            var day = String(date.getDate()).padStart(2, '0');
                            $field.val(year + '-' + month + '-' + day);
                        }
                    } catch(e) {
                        // Leave as is
                    }
                }
            }
        };

        // Initialize all datepickers on page load
        Mautic.initializeEventDatePickers = function() {
            mQuery('.eventdatepicker').each(function() {
                Mautic.initEventDatePicker(this);
            });
        };

        // Initialize datepickers when document is ready
        mQuery(document).ready(function() {
            // Give a small delay to ensure all assets are loaded
            setTimeout(function() {
                Mautic.initializeEventDatePickers();
            }, 500);
        });
    }
</script>
{% endblock %}
