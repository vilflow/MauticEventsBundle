{% block _campaignevent_properties_row %}
<div class="row condition-row">
    <div class="col-xs-4">
        {{ form_row(form.field) }}
    </div>
    <div class="col-xs-4">
        {{ form_row(form.operator) }}
    </div>
    <div class="col-xs-4">
        {{ form_row(form.value) }}
    </div>
</div>

<div class="row condition-custom-date-row" style="display: none;">
    <div class="col-sm-offset-4 col-sm-4">
        <div class="row">
            <div class="form-group col-xs-12 ">
                <div class="input-group">
                    <span class="input-group-addon preaddon">
                        <i class="symbol-hashtag"></i>
                    </span>
                    <input autocomplete="false" type="number" id="event-field-custom-date-interval" class="form-control" value="1" onchange="Mautic.updateEventFieldValueOptions(mQuery('#campaignevent_properties_value'), true)">
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-4">
        <div class="row">
            <div class="form-group col-xs-12 ">
                <select id="event-field-custom-date-unit" class="form-control chosen" autocomplete="false" onchange="Mautic.updateEventFieldValueOptions(mQuery('#campaignevent_properties_value'), true)">
                    {% for interval in ['i', 'h', 'd', 'm', 'y'] %}
                      <option {% if 'd' == interval %}selected{% endif %} value="{{ interval }}">
                          {{- ('mautic.campaign.event.intervalunit.choice.' ~ interval)|trans -}}
                      </option>
                    {% endfor %}
                </select>
            </div>
        </div>
    </div>
</div>

<style>
    .eventdatepicker {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23999" width="16" height="16"><path d="M7 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-8H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3V2h-2v4h-6V2h-2v4zm9 18H4V8h16v16zm-5-5c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm5 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-10 0c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/></svg>') !important;
        background-repeat: no-repeat !important;
        background-position: right 10px center !important;
        background-size: 16px !important;
        padding-right: 35px !important;
    }

    /* Style HTML5 date input */
    input[type="date"].eventdatepicker {
        position: relative;
    }

    /* Chrome, Safari, Edge, Opera */
    input[type="date"].eventdatepicker::-webkit-calendar-picker-indicator {
        cursor: pointer;
        border-radius: 4px;
        margin-right: 2px;
        opacity: 0.6;
        filter: invert(0.6);
    }

    input[type="date"].eventdatepicker::-webkit-calendar-picker-indicator:hover {
        opacity: 1;
        filter: invert(0.8);
    }

    /* Firefox */
    input[type="date"].eventdatepicker::-moz-calendar-picker-indicator {
        cursor: pointer;
    }
</style>

<script>
    if (typeof Mautic.updateEventFieldValues === 'undefined') {
        // Store original updateFieldOperatorValue function
        var originalUpdateFieldOperatorValue = Mautic.updateFieldOperatorValue;

        // Override Mautic.updateFieldOperatorValue to handle event fields with proper action
        Mautic.updateFieldOperatorValue = function(field, action, valueOnChange, valueOnChangeArguments) {
            var fieldId = mQuery(field).attr('id');
            var isOperatorField = fieldId.indexOf('_operator') !== -1;
            var fieldType = isOperatorField ? 'operator' : 'field';
            var fieldPrefix = fieldId.slice(0, -1 * fieldType.length);
            var currentFieldType = mQuery('#' + fieldPrefix + 'value').attr('data-toggle');

            // Check if this is an event field (action contains 'plugin:events')
            var isEventField = action && action.indexOf('plugin:events') !== -1;

            // For event fields, use custom handling to preserve the Events bundle action
            if (isEventField) {
                Mautic.activateLabelLoadingIndicator(fieldId);
                var fieldAlias = mQuery('#'+fieldPrefix+'field').val();
                var fieldOperator = mQuery('#'+fieldPrefix+'operator').val();

                Mautic.ajaxActionRequest(action, {'alias': fieldAlias, 'operator': fieldOperator, 'changed': fieldType}, function(response) {
                    if (typeof response.options != 'undefined') {
                        var valueField = mQuery('#'+fieldPrefix+'value');
                        var valueFieldAttrs = {
                            'class': valueField.attr('class'),
                            'id': valueField.attr('id'),
                            'name': valueField.attr('name'),
                            'autocomplete': valueField.attr('autocomplete'),
                            'value': valueField.val(),
                            'data-toggle': currentFieldType,
                            'data-onload-callback': valueField.attr('data-onload-callback')
                        };

                        if (mQuery('#'+fieldPrefix+'value_chosen').length) {
                            valueFieldAttrs['value'] = '';
                            Mautic.destroyChosen(valueField);
                        }

                        if (!mQuery.isEmptyObject(response.options) && response.fieldType !== 'number') {
                            var newValueField = mQuery('<select/>')
                                .attr('class', valueFieldAttrs['class'])
                                .attr('id', valueFieldAttrs['id'])
                                .attr('name', valueFieldAttrs['name'])
                                .attr('autocomplete', valueFieldAttrs['autocomplete'])
                                .attr('data-toggle', valueFieldAttrs['data-toggle'])
                                .attr('data-onload-callback', valueFieldAttrs['data-onload-callback']);
                            // Don't add inline onchange - will be handled by jQuery event below

                            var multiple = (fieldOperator === 'in' || fieldOperator === '!in');
                            if (multiple) {
                                newValueField.attr('multiple', 'multiple');
                                var newName = newValueField.attr('name') + '[]';
                                newValueField.attr('name', newName);
                                newValueField.attr('data-placeholder', mauticLang['chosenChooseMore']);
                            }

                            mQuery.each(response.options, function(value, optgroup) {
                                if (typeof optgroup === 'object') {
                                    var optgroupEl = mQuery('<optgroup/>').attr('label', value);
                                    mQuery.each(optgroup, function(optVal, label) {
                                        var option = Mautic.createOption(optVal, label);
                                        if (response.optionsAttr && response.optionsAttr[optVal]) {
                                            mQuery.each(response.optionsAttr[optVal], function(optAttr, optVal) {
                                                option.attr(optAttr, optVal);
                                            });
                                        }
                                        optgroupEl.append(option)
                                    });
                                    newValueField.append(optgroupEl);
                                } else {
                                    var option = Mautic.createOption(value, optgroup);
                                    if (response.optionsAttr && response.optionsAttr[value]) {
                                        mQuery.each(response.optionsAttr[value], function(optAttr, optVal) {
                                            option.attr(optAttr, optVal);
                                        });
                                    }
                                    newValueField.append(option);
                                }
                            });

                            // For date fields with custom DateInterval values (e.g., +P16D), adjust before setting value
                            var savedValue = valueFieldAttrs['value'];
                            var predefinedValues = ['custom', 'anniversary', '+P0D', '-P1D', '+P1D'];
                            if ('date' === valueFieldAttrs['data-toggle'] && savedValue && /^[+-]PT?[0-9]+[DIMHY]$/i.test(savedValue) && !predefinedValues.includes(savedValue)) {
                                console.log('Detected custom DateInterval value on build:', savedValue);
                                // Find custom option and set its value to the DateInterval
                                var customOpt = newValueField.find('option[data-custom=1]');
                                if (customOpt.length) {
                                    customOpt.attr('value', savedValue);
                                    savedValue = savedValue; // Keep the DateInterval as the value to select
                                    console.log('Set custom option value to:', savedValue);
                                }
                            }

                            newValueField.val(savedValue);
                            valueField.replaceWith(newValueField);
                            Mautic.activateChosenSelect(newValueField);

                            // For date fields, watch for value changes
                            if ('date' === valueFieldAttrs['data-toggle']) {
                                var selectElem = mQuery('#' + valueFieldAttrs['id']);

                                // Don't bind extra change handlers here - they're handled by valueOnChange below
                                // Just check initial value to show/hide custom date row
                                setTimeout(function() {
                                    var currentValue = selectElem.val();
                                    console.log('Initial VALUE CHECK - value:', currentValue);
                                    if ('custom' === currentValue) {
                                        mQuery('.condition-custom-date-row').show();
                                        // Initialize Chosen on the unit select if not already done
                                        setTimeout(function() {
                                            var unitSelect = mQuery('#event-field-custom-date-unit');
                                            if (unitSelect.length && !mQuery('#event-field-custom-date-unit_chosen').length) {
                                                Mautic.activateChosenSelect(unitSelect);
                                            }
                                        }, 100);
                                    } else {
                                        mQuery('.condition-custom-date-row').hide();
                                    }
                                }, 200);
                            }
                        } else if (mQuery.isEmptyObject(response.options) || response.fieldType === 'number') {
                            // For date fields or number fields with no options, create a text/number input
                            var inputType = response.fieldType === 'number' ? 'number' : 'text';
                            var newValueField = mQuery('<input/>')
                                .attr('class', valueFieldAttrs['class'])
                                .attr('id', valueFieldAttrs['id'])
                                .attr('name', valueFieldAttrs['name'])
                                .attr('autocomplete', valueFieldAttrs['autocomplete'])
                                .attr('type', inputType)
                                .attr('data-toggle', valueFieldAttrs['data-toggle'])
                                .attr('data-onload-callback', valueFieldAttrs['data-onload-callback'])
                                .val(valueFieldAttrs['value']);

                            // Add datepicker class for date fields
                            if ('date' === response.fieldType) {
                                newValueField.addClass('eventdatepicker');
                                newValueField.attr('placeholder', 'yyyy-mm-dd');
                            }

                            valueField.replaceWith(newValueField);

                            // Initialize datepicker if it's a date field
                            if ('date' === response.fieldType) {
                                setTimeout(function() {
                                    Mautic.initEventDatePicker(mQuery('#' + valueFieldAttrs['id']));
                                }, 100);
                            }
                        }

                        if (response.operators) {
                            var operatorField = mQuery('#'+fieldPrefix+'operator');
                            var currentOperator = operatorField.val();

                            // Destroy Chosen if it exists
                            if (mQuery('#'+fieldPrefix+'operator_chosen').length) {
                                Mautic.destroyChosen(operatorField);
                            }

                            operatorField.html('');
                            mQuery.each(response.operators, function(label, value) {
                                operatorField.append(mQuery('<option/>').attr('value', value).text(label));
                            });
                            operatorField.val(currentOperator);
                            // Ensure operator field has the correct onchange handler for event fields
                            operatorField.attr('onchange', 'Mautic.updateEventFieldValues(this)');

                            // Re-activate Chosen
                            Mautic.activateChosenSelect(operatorField);
                        }

                        if (response.disabled) {
                            mQuery('#'+fieldPrefix+'value').attr('disabled', 'disabled');
                        } else {
                            mQuery('#'+fieldPrefix+'value').removeAttr('disabled');
                        }
                    }

                    if (valueOnChange && typeof valueOnChange == 'function') {
                        mQuery('#'+fieldPrefix+'value').off('change').on('change', function () {
                            if (typeof valueOnChangeArguments != 'object') {
                                valueOnChangeArguments = [];
                            }
                            valueOnChangeArguments.unshift(mQuery('#'+fieldPrefix+'value'));
                            valueOnChange.apply(null, valueOnChangeArguments);
                        });

                        // After building the select, check if we need to parse custom DateInterval value
                        // This handles reopening modal with saved custom DateInterval values like +P16D
                        setTimeout(function() {
                            var valueField = mQuery('#'+fieldPrefix+'value');
                            if (valueField.length && valueField.is('select')) {
                                var currentValue = valueField.val();
                                console.log('Checking value field after build:', currentValue);

                                // Check if current value is a CUSTOM DateInterval (not predefined like +P0D, -P1D, +P1D)
                                var predefinedValues = ['custom', 'anniversary', '+P0D', '-P1D', '+P1D'];
                                if (currentValue && /^[+-]PT?[0-9]+[DIMHY]$/i.test(currentValue) && !predefinedValues.includes(currentValue)) {
                                    console.log('Found custom DateInterval value:', currentValue);
                                    // This is a custom DateInterval like +P16D
                                    // The value should already be set in custom option from above
                                    // Now parse it and show the custom date row with interval/unit
                                    var customOption = valueField.find('option[data-custom=1]');
                                    if (customOption.length && customOption.prop('selected')) {
                                        console.log('Parsing custom DateInterval:', currentValue);
                                        valueOnChange.apply(null, [valueField, false]);
                                    }
                                }
                            }
                        }, 300);
                    }
                    Mautic.removeLabelLoadingIndicator();
                }, false, false, "POST");
            } else {
                // Use original function for non-event fields
                originalUpdateFieldOperatorValue.apply(this, arguments);
            }
        };

        Mautic.updateEventFieldValues = function (field) {
            mQuery('.condition-custom-date-row').hide();
            Mautic.updateFieldOperatorValue(field, 'plugin:events:updateEventFieldValues', Mautic.updateEventFieldValueOptions, [true]);

            var fieldId = mQuery(field).attr('id');
            var fieldPrefix = fieldId.slice(0, -5);
            setTimeout(function () {
                mQuery('#' + fieldPrefix + 'operator').attr('onchange', 'Mautic.updateEventFieldValues(this)');
            }, 0);
        };

        Mautic.updateEventFieldValueOptions = function (field, updating) {
            var fieldId = mQuery(field).attr('id');
            var fieldPrefix = fieldId.slice(0, -5);
            var operator = mQuery('#' + fieldPrefix + 'operator').val();

            // Check if operator is 'date' (not field type!)
            if ('date' === operator) {
                var customOption = mQuery(field).find('option[data-custom=1]');
                var value = mQuery(field).val();

                console.log('updateEventFieldValueOptions called - value:', value, 'updating:', updating);

                // Check if custom is selected (either value='custom' or value is a custom DateInterval)
                var predefinedValues = ['anniversary', '+P0D', '-P1D', '+P1D'];
                var customOptionSelected = customOption.length && customOption.is(':selected');
                var isCustomSelected = customOptionSelected || value === 'custom' || (value && /^[+-]PT?[0-9]+[DIMHY]$/i.test(value) && !predefinedValues.includes(value));

                console.log('isCustomSelected:', isCustomSelected, '- value:', value);

                if (isCustomSelected) {
                    console.log('Custom option is selected, showing custom date row');
                    if (!updating) {
                        // Parse existing value if it's in DateInterval format: -/+ P/PT number unit
                        if (value && value !== 'custom') {
                            var regex = /(\+|-)(PT?)([0-9]*)([DIMHY])$/g;
                            var match = regex.exec(value);
                            if (match) {
                                var interval = ('-' === match[1]) ? match[1] + match[3] : match[3];
                                var unit = ('PT' === match[2] && 'M' === match[4]) ? 'i' : match[4];

                                mQuery('#event-field-custom-date-interval').val(interval);
                                mQuery('#event-field-custom-date-unit').val(unit.toLowerCase());
                            }
                        } else if (value === 'custom') {
                            // If user just selected 'custom' from dropdown, set default values
                            console.log('Setting default interval/unit values');
                            mQuery('#event-field-custom-date-interval').val(1);
                            mQuery('#event-field-custom-date-unit').val('d');
                        }
                    } else {
                        // Convert interval/unit into PHP DateInterval format
                        var interval = mQuery('#event-field-custom-date-interval').val();
                        var unit = mQuery('#event-field-custom-date-unit').val();

                        var prefix = ("i" == unit || "h" == unit) ? "PT" : "P";
                        // DateInterval uses M for minutes instead of i
                        if ("i" === unit) {
                            unit = "m";
                        }

                        unit = unit.toUpperCase();

                        var operatorSign = "+";
                        if (parseInt(interval) < 0) {
                            operatorSign = "-";
                            interval = -1 * parseInt(interval);
                        }
                        var newValue = operatorSign + prefix + interval + unit;
                        customOption.attr('value', newValue);
                        customOption.prop('selected', true);
                        mQuery(field).val(newValue);
                }
                    mQuery('.condition-custom-date-row').show();
                    // Initialize Chosen on unit select if needed
                    setTimeout(function() {
                        var unitSelect = mQuery('#event-field-custom-date-unit');
                        if (unitSelect.length && !mQuery('#event-field-custom-date-unit_chosen').length) {
                            Mautic.activateChosenSelect(unitSelect);
                        }
                    }, 100);
                } else {
                    mQuery('.condition-custom-date-row').hide();
                }
            } else {
                mQuery('.condition-custom-date-row').hide();
            }
        };

        // Initialize date picker for date fields
        // Tries datetimepicker first (if available), then HTML5 type="date"
        Mautic.initEventDatePicker = function(field) {
            var $field = mQuery(field);

            if (!$field.length) {
                return;
            }

            // Try using datetimepicker if available (Mautic standard)
            if (typeof $field.datetimepicker === 'function') {
                try {
                    $field.datetimepicker({
                        format: 'Y-m-d',
                        closeOnDateSelect: true,
                        validateOnBlur: false,
                        scrollMonth: false,
                        scrollInput: false,
                        timepicker: false
                    });
                    return;
                } catch(e) {
                    // If datetimepicker fails, continue to HTML5
                }
            }

            // Fallback: Convert to HTML5 date input type
            if ($field.attr('type') === 'text') {
                $field.attr('type', 'date');
                // Set value in correct format if it exists
                var currentVal = $field.val();
                if (currentVal && !currentVal.match(/^\d{4}-\d{2}-\d{2}$/)) {
                    // Try to parse and reformat the value
                    try {
                        var date = new Date(currentVal);
                        if (!isNaN(date.getTime())) {
                            var year = date.getFullYear();
                            var month = String(date.getMonth() + 1).padStart(2, '0');
                            var day = String(date.getDate()).padStart(2, '0');
                            $field.val(year + '-' + month + '-' + day);
                        }
                    } catch(e) {
                        // Leave as is
                    }
                }
            }
        };

        // Initialize all datepickers on page load
        Mautic.initializeEventDatePickers = function() {
            mQuery('.eventdatepicker').each(function() {
                Mautic.initEventDatePicker(this);
            });
        };

        // Shared initializer so the UI can re-run when the modal is reopened
        Mautic.initEventFieldValueUi = function() {
            // Give a small delay to ensure all assets are loaded
            setTimeout(function() {
                Mautic.initializeEventDatePickers();

                // Check if we need to initialize date field with operator = 'date'
                // This handles the case when modal is reopened with saved data
                mQuery('input.event-date-value-placeholder[data-toggle="date"]').each(function() {
                    var valueInput = mQuery(this);
                    var fieldId = valueInput.attr('id');
                    var fieldPrefix = fieldId.replace('_value', '');
                    var operator = mQuery('#' + fieldPrefix + '_operator').val();
                    var fieldSelect = mQuery('#' + fieldPrefix + '_field');

                    console.log('Found date placeholder input - operator:', operator, 'value:', valueInput.val());

                    // If operator is 'date', trigger AJAX to rebuild the select
                    if ('date' === operator && fieldSelect.length) {
                        console.log('Initializing date field for saved data');
                        // Trigger the field change to rebuild value field
                        Mautic.updateEventFieldValues(fieldSelect[0]);
                    } else {
                        console.log('NOT triggering AJAX - operator is not date or field select not found');
                    }
                });

                // Initialize custom date row visibility for date fields
                mQuery('select[data-toggle="date"]').each(function() {
                    var selectedValue = mQuery(this).val();
                    if ('custom' === selectedValue) {
                        mQuery('.condition-custom-date-row').show();
                    } else {
                        mQuery('.condition-custom-date-row').hide();
                    }

                    // Bind change event to show/hide custom date row
                    mQuery(this).off('change.eventfieldcustom').on('change.eventfieldcustom', function() {
                        var value = mQuery(this).val();
                        if ('custom' === value) {
                            mQuery('.condition-custom-date-row').show();
                        } else {
                            mQuery('.condition-custom-date-row').hide();
                        }
                    });
                });

                // Before form submit, update custom date value to DateInterval format
                mQuery('form').off('submit.eventfieldcustom').on('submit.eventfieldcustom', function() {
                    // Find all event field value selects with date operator
                    mQuery('select[id$="_properties_value"]').each(function() {
                        var valueSelect = mQuery(this);
                        var fieldId = valueSelect.attr('id');
                        var fieldPrefix = fieldId.replace('_value', '');
                        var operator = mQuery('#' + fieldPrefix + '_operator').val();

                        // If operator is 'date' and custom option is selected
                        if ('date' === operator) {
                            var customOption = valueSelect.find('option[data-custom=1]');
                            if (customOption.length && customOption.prop('selected')) {
                                // Update the custom option value with interval/unit
                                Mautic.updateEventFieldValueOptions(valueSelect, true);
                            }
                        }
                    });
                });
            }, 500);
        };
    }

    // Re-run initialization if the template is injected again (modal reopened)
    if (typeof Mautic.initEventFieldValueUi === 'function') {
        Mautic.initEventFieldValueUi();
    }
</script>
{% endblock %}
